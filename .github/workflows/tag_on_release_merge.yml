name: Create Tag on Release Branch Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-tag:
    # Only run if the PR was merged and the source branch starts with 'release/'
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is needed to push commits and create tags
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need all history for tags
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main # Make sure we're on the main branch
      
      # Step 2: Extract version number from branch name (release/x.x.x -> x.x.x)
      - name: Extract Version
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from branch $BRANCH_NAME"
      
      # Step 3: Update version in pubspec.yaml
      - name: Update Pubspec Version
        run: |
          VERSION=${{ steps.extract_version.outputs.VERSION }}
          # Use sed to replace the version line in pubspec.yaml
          sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml
          # Commit the change
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "Bump version to $VERSION"
          git push origin release/${VERSION}
      
      # Step 4: Create and push the new tag
      - name: Create and Push Tag
        run: |
          VERSION=${{ steps.extract_version.outputs.VERSION }}
          echo "Creating tag v$VERSION"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
