name: Development Merge Readiness Checks

on:
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  # Check if main can be merged into development without conflicts
  check-merge-conflicts:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository code with all branches
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Step 2: Fetch all branches
      - name: Fetch all branches
        run: |
          git fetch origin
      
      # Step 3: Check if development branch exists
      - name: Check if development branch exists
        id: check_dev_branch
        run: |
          if git show-ref --verify --quiet refs/remotes/origin/development; then
            echo "Development branch exists, proceeding with conflict check"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Development branch does not exist, skipping conflict check"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # Step 4: Check for merge conflicts
      - name: Check for merge conflicts
        if: steps.check_dev_branch.outputs.branch_exists == 'true'
        run: |
          # Try to merge main into development without committing
          git checkout origin/development -b temp-development
          if git merge --no-commit --no-ff origin/main; then
            echo "Main can be merged into development without conflicts"
            # Abort the merge since we're just checking
            git merge --abort
          else
            echo "Merging main into development would cause conflicts"
            # Abort the merge
            git merge --abort
            exit 1
          fi

  # Check if version tag already exists
  check-version:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      # Step 2: Get version from pubspec.yaml
      - name: Get Version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | tr -d '[:space:]')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
      
      # Step 3: Check if tag already exists for this version
      - name: Check if tag exists
        id: check_tag
        run: |
          git fetch --tags
          if git tag | grep -q "v${{ steps.get_version.outputs.version }}"; then
            echo "Tag v${{ steps.get_version.outputs.version }} already exists. Please update the version in pubspec.yaml."
            exit 1
          else
            echo "Tag does not exist yet. Proceeding with build."
          fi
